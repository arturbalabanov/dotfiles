# Snippets for Go

priority -50

global !p
_pascal_to_snake_re = re.compile(r'([A-Z1-9]+)([^A-Z1-9])?')
def pascal_to_snake(string):
	def _pascal_to_snake_repl(match):
		uppercase, following_char = match.groups()

		if following_char is None:
			# This is the last group, which means that the string ends in an
			# upper-case word

			return '_' + uppercase.lower()

		words = uppercase

		if len(uppercase) > 1:
			# This is not a capitalized word but an uppercased one. However, the
			# next word will also start with a capital letter, so we need to
			# separate them here

			words = uppercase[:-1] + '_' + uppercase[-1]

		return '_' + words.lower() + following_char

	snake_cased_string = _pascal_to_snake_re.sub(_pascal_to_snake_repl, string)

	if snake_cased_string.startswith('_'):
		return snake_cased_string[1:]

	return snake_cased_string


_in_struct_re = re.compile(r'^\s*(type\s*\w+\s*struct\s*\{|\w+\s*[\w\[\]\*\.]+(\s*\`.*\`)?)\s*$')
def ctx_in_struct(snip):
	prev_line_index = snip.line

	# Find the previous non empty line
	while True:
		prev_line_index -= 1

		if prev_line_index < 0:
			return False

		prev_line = snip.buffer[prev_line_index]

		if prev_line.strip():
			break

	return _in_struct_re.search(prev_line) is not None

def cammel_case_alias(string):
	if not string:
		return ''

	chars = [string[0].lower()] + [
		char.lower()
		for char in string[1:]
		if char.isupper()
	]

	return ''.join(chars)

_in_func_or_meth_re = re.compile(r'''
	^\s*func
	\s*(?P<receiver>\(\s*\w+\s+[\w\[\]\*\.]+\s*\))?
	\s*(?P<name>[\w_]+)\s*
	\s*\((?P<args>(?:
		\s*\w+                      # Arg name
		(?:\s+[\w\[\]\{\}\*\.]+)?   # Arg type (optional because multiple args can have the same type)
		,?\s*
	)*)\)
	\s*(?P<returns>\(?
		(?:\s*(?:\w+\s+)?[\w\[\]\*\.]+,?\s*)*
	\)?)?
	\s*\{
	\s*$
''', flags=re.VERBOSE)
def get_innermost_func_or_meth_def():
	# TODO: Use indentation!
	curr_row, curr_col = vim.current.window.cursor
	prev_line_index = curr_row - 1

	# Find the previous non empty line
	while True:
		prev_line_index -= 1

		if prev_line_index < 0:
			return None

		prev_line = vim.current.buffer[prev_line_index].strip()

		if not prev_line or prev_line.startswith('//'):
			continue

		line_match = _in_func_or_meth_re.search(prev_line)
		if line_match is not None:
			return line_match


_vars_re = re.compile(r'^\s*(?P<vars>[\w ,]+)\s*\:?=')
def get_go_vars(vars_placeholder):
	vars_match = _vars_re.search(vars_placeholder)
	if vars_match is None:
		return []

	return list(map(
		lambda x: x.strip(),
		vars_match.group('vars').split(',')
	))

def is_multiline_call(vars_placeholder):
	_, _, call = vars_placeholder.partition('=')
	return '\n' in call

def try_snippet_prefix(snip, vars_placeholder):
	go_vars = get_go_vars(vars_placeholder)

	if not go_vars:
		return

	only_one_var = sum(1 for v in go_vars if v != '_') == 1

	if only_one_var and not is_multiline_call(vars_placeholder):
		snip.rv = "if "
	else:
		snip.rv = ""

def try_snippet_suffix(snip, vars_placeholder):
	go_vars = get_go_vars(vars_placeholder)

	if not go_vars:
		return

	err_var = go_vars[-1]

	only_one_var = sum(1 for v in go_vars if v != '_') == 1

	if only_one_var and not is_multiline_call(vars_placeholder):
		snip.rv = "; %s != nil {" % err_var
	else:
		snip += "if %s != nil {" % err_var

	func_or_meth_match = get_innermost_func_or_meth_def()
	returns = func_or_meth_match.group('returns')
	err_term = get_err_terminator(returns, err_var)

	snip.shift()
	snip += err_term
	snip.unshift()
	snip += "}"

def get_err_terminator(func_returns_str, err_var):
	if not func_returns_str:
		return "panic({})".format(err_var)

	if func_returns_str.startswith('('):
		func_returns_str = func_returns_str[1:-1]

	return_types = [
		ret.strip().split()[-1]
		for ret in func_returns_str.split(',')
	]

	if return_types[-1] != 'error':
		return "panic({})".format(err_var)

	return_vals = []
	for return_type in return_types[:-1]:
		if return_type.startswith('*'):
			zero = 'nil'
		elif return_type.startswith('map['):
			zero = 'nil'
		elif return_type.startswith('['):
			zero = 'nil'
		elif return_type.startswith('interface'):
			zero = 'nil'
		elif return_type.startswith('func'):
			zero = 'nil'
		elif return_type in ('chan', 'chan<-', '<-chan'):
			zero = 'nil'
		elif return_type == 'string':
			zero = '""'
		elif return_type == 'bool':
			zero = 'false'
		elif return_type in ('int8', 'uint8', 'byte', 'int16', 'uint16', 'int32', 'rune', 'uint32', 'int64', 'uint64', 'int', 'uint', 'uintptr'):
			zero = '0'
		elif return_type in ('float32', 'float64'):
			zero = '0.0'
		elif return_type in ('complex32', 'complex64'):
			zero = '0.0'
		else:
			zero = return_type + '{}'

		return_vals.append(zero)

	return_vals.append(err_var)

	return "return {}".format(', '.join(return_vals))

endglobal

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "Package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

# statements
snippet for "For loop" b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet select "Select statement" b
select {
case${0}
}
endsnippet

snippet case "Case clause" b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet default "Default clause" b
default:
	${0:${VISUAL}}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (`!p snip.rv = cammel_case_alias(t[1])` *${1:type}) ${3:name}(${4})`!p
if not t[5]:
	snip.rv = ""
elif ',' in t[5]:
    snip.rv = " ("
else:
	snip.rv = " "
`$5`!p
if ',' in t[5]:
    snip.rv = ")"
else:
	snip.rv = ""
` {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json "JSON Key"
\`json:"${1:`!v  go#util#snippetcase(matchstr(getline("."), '\w\+'))`}"\`
endsnippet

snippet yaml "YAML Key"
\`yaml:"${1:`!v  go#util#snippetcase(matchstr(getline("."), '\w\+'))`}"\`
endsnippet

context "ctx_in_struct(snip)"
snippet jf "A JSON field" be
$1 ${2:string} \`json:"${3:`!p snip.rv = pascal_to_snake(t[1])`}"\`
endsnippet

snippet pr "fmt.Println"
fmt.Println(${1:${VISUAL}})
endsnippet

# Error handling

snippet iferr "If with inline error" b
if err := ${1:condition}; err != nil {
	${0:${VISUAL}}
}
endsnippet

snippet try "try" b
`!p try_snippet_prefix(snip, t[1])`$1`!p try_snippet_suffix(snip, t[1])`
endsnippet

# Testing

snippet tt "table-driven tests"
func Test${1:Func}(t *testing.T) {
	testCases := []struct {
		${2:input} ${3:Type}
		want ${4:Type} 
	}{
		{$2: ${5:""}, want: ${6:""}},${0: // comment}
	}
	for _, tc := range testCases {
		if got := $1(tc.$2); got != tc.want {
			t.Errorf("$1(%s) = %s; want %s", tc.$2, got, tc.want)
		}
	}
}
endsnippet

snippet tts "table-drive tests using subtests"
func Test${1:Func}(t *testing.T) {
	testCases := []struct {
		${2:input} ${3:Type}
		want ${4:Type} 
	}{
		{$2: ${5:""}, want: ${6:""}},${0: // comment}
	}
	for _, tc := range testCases {
		t.Run(fmt.Sprintf("%q", tc.$2), func(t *testing.T) {
			if got := $1(tc.$2); got != tc.want {
				t.Errorf("got %s; want %s", got, tc.want)
			}
		})
	}
}
endsnippet

# Utilities

snippet ap "append" b
${1:slice} = append($1, ${2:elems})
endsnippet

# vim:ft=snippets:
