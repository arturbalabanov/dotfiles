# Non-lazy-loaded... Yet {{{
	[[plugins]]
	repo = 'itchyny/vim-cursorword'

	[[plugins]]
	repo = 'vim-airline/vim-airline'
	hook_add = '''
		set laststatus=2   " Always show the statusline

		let g:airline_powerline_fonts = 1

		let g:airline#extensions#whitespace#enabled = 0

		let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#show_tab_nr = 0
        let g:airline#extensions#tabline#show_tab_count = 0
        let g:airline#extensions#tabline#show_tab_type = 0
        let g:airline#extensions#tabline#show_buffers = 0

        let g:airline#extensions#bufferline#enabled = 0

		let g:airline#extensions#ale#enabled = 1
		let g:airline#extensions#ale#error_symbol = '✗'
		let g:airline#extensions#ale#warning_symbol = ''

		let g:airline#extensions#branch#enabled = 1

		if !exists('g:airline_symbols')
			let g:airline_symbols = {}
		endif

		let g:airline_exclude_preview = 1

		" Sections
		let g:airline_skip_empty_sections = 1
		let g:airline_section_y = ''
		let g:airline_section_z = ''
	'''

	[[plugins]]
	repo = 'vim-airline/vim-airline-themes'
	depends = 'vim-airline'
	hook_add = '''
		let g:airline_theme = 'powerlineish'
	'''

	[[plugins]]
	repo = 'w0ng/vim-hybrid'

	[[plugins]]
	repo = 'python-mode/python-mode'

	[[plugins]]
	repo = 'terryma/vim-multiple-cursors'

	[[plugins]]
	repo = 'tpope/vim-surround'

	[[plugins]]
	repo = 'tpope/vim-fugitive'

	[[plugins]]
	depends = 'vim-fugitive'
	repo = 'gregsexton/gitv'
	on_cmd = 'Gitv'

	[[plugins]]
	repo = 'embear/vim-localvimrc'

	[[plugins]]
	repo = 'tomtom/tcomment_vim'
	on_cmd = "TComment"
	hook_add = '''
		let g:tcomment_maps=0
		
		" Ctrl-/ for comment/uncomment
		nnoremap <C-_> :TComment<CR>
		vnoremap <C-_> :TComment<CR>
		inoremap <C-_> <Esc>:TComment<CR>i

		let g:tcomment#options = {}
		let g:tcomment#options.mixedindent = 1
	'''

	[[plugins]]
	repo = 'mattn/emmet-vim'

	[[plugins]]
	repo = 'inkarkat/vim-SyntaxRange'

	[[plugins]]
	repo = 'jiangmiao/auto-pairs'
	on_i = 1
	hook_source = '''
		let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
	'''

	[[plugins]]
	repo = 'plytophogy/vim-virtualenv'

	[[plugins]]
	repo = 'SirVer/ultisnips'
	on_i = 1
	on_cmd = ['UltiSnipsEdit', 'UltiSnipsAddFiletypes']
	hook_source = '''
		let g:UltiSnipsEditSplit="vertical"
		let g:UltiSnipsExpandTrigger = "<C-j>"
		let g:UltiSnipsJumpForwardTrigger = "<C-j>"
		let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
	'''

	[[plugins]]
	repo = 'tpope/vim-endwise'

	[[plugins]]
	repo = 'tommcdo/vim-exchange'

	[[plugins]]
	repo = 'ryanoasis/vim-devicons'

	[[plugins]]
	repo = 'w0rp/ale'
	hook_add = '''
		if &diff
			let g:ale_enabled = 0
		else
			let g:ale_enabled = 1
		endif
	'''

	[[plugins]]
	repo = 'othree/eregex.vim'

	[[plugins]]
	repo = 'jpalardy/vim-slime'

	[[plugins]]
	repo = 'tpope/vim-projectionist'

	[[plugins]]
	repo = 'tpope/vim-dispatch'
	on_cmd = ['Make', 'Copen', 'Dispatch', 'FocusDispatch', 'Start', 'Spawn']
	hook_add = '''
		nnoremap <F9> :Dispatch<CR>
		inoremap <F9> <Esc>:Dispatch<CR>a
	'''

	[[plugins]]
	repo = 'tpope/vim-abolish'

	[[plugins]]
	repo = 'djoshea/vim-autoread'

	[[plugins]]
	repo = 'kshenoy/vim-signature'

	[[plugins]]
	repo = 'sheerun/vim-polyglot'

	[[plugins]]
	repo = 'AndrewRadev/splitjoin.vim'
	hook_add = '''
		let g:splitjoin_trailing_comma = 1
		let g:splitjoin_python_brackets_on_separate_lines = 1

		" Mappings
		let g:splitjoin_split_mapping = ''
		let g:splitjoin_join_mapping = ''

		nnoremap sj :SplitjoinSplit<cr>
		nnoremap sk :SplitjoinJoin<cr>
	'''

	[[plugins]]
	repo = 'unblevable/quick-scope'
	hook_add = '''
		let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
	'''
# }}}
# Dependancies {{{
	[[plugins]]
	repo = 'kana/vim-operator-user'
	lazy = 1

	[[plugins]]
	repo = 'kana/vim-textobj-user'
	lazy = 1

	[[plugins]]
	repo = 'xolox/vim-misc'
	lazy = 1

	# TODO: See which plugins require these two
	[[plugins]]
	repo = 'MarcWeber/vim-addon-mw-utils'
	lazy = 1

	[[plugins]]
	repo = 'tomtom/tlib_vim'
	lazy = 1
# }}}
# Lazy-loaded {{{
	[[plugins]]
	repo = 'scrooloose/nerdtree'
	on_cmd = ['NERDTree', 'NERDTreeClose', 'NERDTreeFocus', 
			  'NERDTreeMirror', 'NERDTreeCWD', 'NERDTreeFind', 
			  'NERDTreeFromBookmark', 'NERDTreeToggle']
	hook_add = '''
		noremap <F2> :NERDTreeToggle<CR>
	'''
	hook_source = '''
		let g:NERDTreeShowBookmarks=1
		let g:NERDTreeMapOpenSplit='s'
		let g:NERDTreeMapOpenVSplit='v'
		let g:NERDTreeRespectWildIgnore=1
	'''

	[[plugins]]
	repo = 'christoomey/vim-tmux-navigator'
	on_cmd = ['TmuxNavigateLeft', 'TmuxNavigateRight', 'TmuxNavigateUp',
			  'TmuxNavigateDown', 'TmuxNavigatePrevious']
	hook_add = '''
		nnoremap <silent> <A-h> :TmuxNavigateLeft<cr>
		nnoremap <silent> <A-j> :TmuxNavigateDown<cr>
		nnoremap <silent> <A-k> :TmuxNavigateUp<cr>
		nnoremap <silent> <A-l> :TmuxNavigateRight<cr>
	'''
	hook_source = '''
		let g:tmux_navigator_no_mappings = 1
		let g:tmux_navigator_disable_when_zoomed = 1
	'''

	[[plugins]]
	repo = 'hail2u/vim-css3-syntax'
	on_ft = 'css'

	[[plugins]]
	repo = 'groenewege/vim-less'
	on_ft = 'less'

	[[plugins]]
	repo = 'cakebaker/scss-syntax.vim'
	on_ft = ['scss', 'sass']

	[[plugins]]
	repo = 'exu/pgsql.vim'
	on_ft = ['sql', 'pgsql']
	hook_source = '''
		let g:sql_type_default = 'pgsql'
	'''

	[[plugins]]
	repo = 'alcesleo/vim-uppercase-sql'
	on_ft = ['sql', 'pgsql']

	# [[plugins]]
	# repo = 'tmhedberg/SimpylFold'
	# on_ft = 'python'

	[[plugins]]
	repo = 'tpope/vim-haml'
	on_ft = 'haml'

	[[plugins]]
	repo = 'cespare/vim-toml'
	on_ft = 'toml'

	[[plugins]]
	repo = 'kchmck/vim-coffee-script'
	on_ft = 'coffee'

	[[plugins]]
	repo = 'sjl/gundo.vim'
	on_cmd = 'GundoToggle'
	hook_add = '''
		nnoremap <F1> :GundoToggle<CR>
	'''
	hook_source = '''
		let g:gundo_tree_statusline = "Gundo"
		let g:gundo_preview_statusline = "Gundo Preview"
		let g:gundo_right = 1
	'''

	[[plugins]]
	repo = 'majutsushi/tagbar'
	on_cmd = 'TagbarToggle'
	hook_add = '''
		nnoremap <F3> :TagbarToggle<CR>
	'''

	[[plugins]]
	repo = 'plasticboy/vim-markdown'
	on_ft = 'markdown'

	[[plugins]]
	repo = 'vim-ruby/vim-ruby'
	on_ft = 'ruby'

	[[plugins]]
	repo = 'keith/tmux.vim'
	on_ft = 'tmux'

	[[plugins]]
	repo = 'junegunn/limelight.vim'
	on_cmd = 'Limelight'

	[[plugins]]
	repo = 'xolox/vim-lua-ftplugin'
	depends = 'vim-misc'
	on_ft = 'lua'

	[[plugins]]
	repo = 'junegunn/goyo.vim'
	depends = 'limelight.vim'
	on_cmd = 'Goyo'

	[[plugins]]
	repo = 'davidhalter/jedi-vim'
	on_ft = 'python'
	hook_source = '''
		let g:jedi#use_tabs_not_buffers = 1
		let g:jedi#show_call_signatures = "0"  " 1 -> Popup; 2 -> command line
		let g:jedi#completions_enabled = 0
		let g:jedi#goto_command = "gd"
		let g:jedi#documentation_command = "<C-d>"

		" Don't fucking insert 'import' to disrupt my flow!
		let g:jedi#smart_auto_mappings = 0
	'''

	[[plugins]]
	repo = 'haya14busa/vim-operator-flashy'
	depends = 'vim-operator-user'
	on_map = [['nx', '<Plug>']]
	hook_add = '''
		map y <Plug>(operator-flashy)
		nmap Y ^<Plug>(operator-flashy)g_
	'''

	[[plugins]]
	repo = 'beloglazov/vim-textobj-quotes'
	depends = 'vim-textobj-user'
	on_map = [['ox', '<Plug>']]

	[[plugins]]
	repo = 'Julian/vim-textobj-brace'
	depends = 'vim-textobj-user'
	on_map = [['ox', '<Plug>']]

	# TODO: Add build instructions
	[[plugins]]
	repo = 'Rykka/InstantRst'
	on_ft = 'rst'

	[[plugins]]
	repo = 'guns/xterm-color-table.vim'
	on_cmd = 'XtermColorTable'

	[[plugins]]
	repo = 'arturbalabanov/context-edit'
	depends = 'context_filetype.vim'
	on_func = 'ContextEdit'
    hook_add = '''
        nnoremap <silent> <F6> :<C-U>call ContextEdit()<CR>
    '''

	[[plugins]]
	repo = 'tpope/vim-git'
	on_ft = ['git', 'gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail']

    [[plugins]]
    repo = 'fatih/vim-go'
    on_ft = 'go'
    make = ':GoUpdateBinaries'
# }}}
	[[plugins]]
	repo = 'Shougo/dein.vim'

	[[plugins]]
	repo = 'arturbalabanov/denite.nvim'
	on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord ', 'DeniteProjectDir ']
	hook_source = '''
		call denite#custom#option('default', {
			\ 'prompt': '❯',
			\ 'highlight_matched_char': 'Underlined',
			\ 'highlight_mode_normal': 'CursorLine',
			\ 'statusline': 0,
			\ 'vertical_preview': 1,
			\ })

		call denite#custom#var('file/rec', 'command', ['scantree.py'])
		call denite#custom#var('file/rec', 'matchers', ['matcher/substring'])

		call denite#custom#var('grep', 'command', ['rg'])
		call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading', '--smart-case'])
		call denite#custom#var('grep', 'recursive_opts', [])
		call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
		call denite#custom#var('grep', 'separator', ['--'])

		call denite#custom#var('outline', 'command', ['uctags'])
		call denite#custom#var('outline', 'ignore_types', ['v', 'x'])
		call denite#custom#var('outline', 'candidate_columns', [
			\ {'name': 'type'},
			\ {'name': 'name', 'max_len': 40, 'use_filter': 1},
			\ {'name': 'ref', 'use_filter': 1},
			\ ])

		call denite#custom#source('grep', 'converters', ['converter/abbr_word'])

		call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')
		call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabswitch>', 'noremap')
		call denite#custom#map('insert', '<C-s>', '<denite:do_action:splitswitch>', 'noremap')
		call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplitswitch>', 'noremap')
		call denite#custom#map('normal', 't', '<denite:do_action:tabswitch>', 'noremap')
		call denite#custom#map('normal', 's', '<denite:do_action:splitswitch>', 'noremap')
		call denite#custom#map('normal', 'v', '<denite:do_action:vsplitswitch>', 'noremap')
		call denite#custom#map('insert', '<Esc>', '<denite:quit>', 'noremap')
		call denite#custom#map('normal', '<Esc>', '<denite:quit>', 'noremap')

		call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
		call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
	'''
	hook_add = '''
		nnoremap <silent> <C-p> :<C-u>Denite file/rec -split=floating<CR>
		nnoremap <silent> <C-h> :<C-u>Denite help<CR>
		nnoremap <silent> <C-f> :<C-u>Denite -no-empty grep:. -mode=normal<CR>
		nnoremap <silent> <leader>* :<C-u>DeniteCursorWord grep:. -mode=normal<CR>
		cnoremap <silent> <C-r> :<C-u>Denite command_history<CR>
        nnoremap <silent> <C-s> :<C-u>Denite spell -split=floating -mode=normal<CR>
        nnoremap <silent> <C-o> :<C-u>Denite outline -smartcase=true -split=floating<CR>
	'''

	# [[plugins]]
	# repo = 'rafi/vim-denite-z'
	# depends = 'denite.nvim'
	# on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord ', 'DeniteProjectDir ']
	# hook_source = '''
	#	 call denite#custom#var('z', 'order', 'frecent')
	# 	call denite#custom#source('z', 'sorters', ['sorter_z'])
	# '''

	[[plugins]]
	repo = 'Shougo/context_filetype.vim'

	[[plugins]]
	repo = 'Shougo/deoplete.nvim'
	depends = 'context_filetype.vim'
	on_i = 1
	hook_source = '''
		let g:deoplete#enable_at_startup = 1
		let g:deoplete#max_menu_width = 80

		" Auto select the first option
		set completeopt+=noinsert

		inoremap <silent><expr> <TAB>
				\ pumvisible() ? "\<C-n>" :
				\ <SID>check_back_space() ? "\<TAB>" :
				\ deoplete#mappings#manual_complete()

		function! s:check_back_space() abort "{{{
			let col = col('.') - 1
			return !col || getline('.')[col - 1]  =~ '\s'
		endfunction "}}}

		" "Auto close the "preview" (dostring) window after the completion is done
		" augroup go_autoclose_preview
		" 	autocmd!
		" 	autocmd CompleteDone * silent! pclose!
		" 	autocmd InsertLeave * silent! pclose!
		" augroup END

        " Disable the "preview" (docstring) window after the completion is done
		set completeopt-=preview
	'''

	[[plugins]]
	repo = 'zchee/deoplete-jedi'
	depends = 'deoplete.nvim'
	on_ft = 'python'
	on_i = 1

	[[plugins]]
	repo = 'zchee/deoplete-zsh'
	depends = 'deoplete.nvim'
	on_ft = 'zsh'
	on_i = 1

    [[plugins]]
    repo = 'deoplete-plugins/deoplete-go'
	depends = 'deoplete.nvim'
    build = 'make'
    on_ft = 'go'
    on_i = 1

	[[plugins]]
	repo = 'Shougo/echodoc.vim'
	on_event = 'CompleteDone'
	hook_add = '''
		set noshowmode  " Don't show --INSERT-- in the command_line
		let g:echodoc#enable_at_startup = 1
	'''

	[[plugins]]
	repo = 'Shougo/neco-vim'
	on_ft = 'vim'
# }}}
