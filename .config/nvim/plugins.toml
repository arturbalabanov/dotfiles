# Non-lazy-loaded... Yet {{{
    [[plugins]]
    repo = 'itchyny/vim-cursorword'

    [[plugins]]
    repo = 'tommcdo/vim-exchange'
    hook_add = '''
        nmap X <Plug>(Exchange)
        xmap X <Plug>(Exchange)
        nmap cX <Plug>(ExchangeClear)
        nmap XX <Plug>(ExchangeLine)
    '''

    [[plugins]]
    repo = 'vim-airline/vim-airline'
    hook_add = '''
        set laststatus=2   " Always show the statusline

        let g:airline_powerline_fonts = 1
        
        let g:airline#extensions#unicode#enabled = 0

        let g:airline#extensions#whitespace#enabled = 0
        
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#show_tab_nr = 0
        let g:airline#extensions#tabline#show_tab_count = 0
        let g:airline#extensions#tabline#show_tab_type = 0
        let g:airline#extensions#tabline#show_buffers = 0
        
        let g:airline#extensions#bufferline#enabled = 0
        
        let g:airline#extensions#ale#enabled = 1
        let g:airline#extensions#ale#error_symbol = '✗'
        let g:airline#extensions#ale#warning_symbol = ''
        
        let g:airline#extensions#branch#enabled = 0
        
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif
        
        let g:airline_exclude_preview = 1
        
        " Sections
        let g:airline_skip_empty_sections = 1
        " No git info
        let g:airline_section_b = ''
        " No file encoding
        let g:airline_section_y = ''
    '''

    [[plugins]]
    repo = 'vim-airline/vim-airline-themes'
    depends = 'vim-airline'
    hook_add = '''
        " let g:airline_theme = 'base16_gruvbox_dark_soft'
    '''

    [[plugins]]
    repo = 'morhetz/gruvbox'

    [[plugins]]
    repo = 'terryma/vim-multiple-cursors'
    hook_source = '''
        let g:multi_cursor_insert_maps = { 'j': 1 }

        function! Multiple_cursors_before()
            if deoplete#is_enabled()
                call deoplete#disable()
                let g:deoplete_is_enable_before_multi_cursors = 1
            else
                let g:deoplete_is_enable_before_multi_cursors = 0
            endif
        endfunction

        function! Multiple_cursors_after()
            if g:deoplete_is_enable_before_multi_cursors
                call deoplete#enable()
            endif
        endfunction
    '''

    [[plugins]]
    repo = 'machakann/vim-sandwich'
    hook_add = '''
        " Use the surround mappings, I'm already used to that interface
        runtime macros/sandwich/keymap/surround.vim
    '''

    [[plugins]]
    repo = 'tpope/vim-fugitive'

    [[plugins]]
    repo = 'embear/vim-localvimrc'
    hook_add = '''
        " TODO: Fix these hardcoded paths. Ideally every project should have
        " the ability to have a local vimrc

        let g:localvimrc_whitelist = [expand('$HOME/dev'), expand('$HOME/side/pgcli')]
        let g:localvimrc_sandbox=0
    '''

    [[plugins]]
    repo = 'jiangmiao/auto-pairs'

    [[plugins]]
    repo = 'tpope/vim-endwise'

    [[plugins]]
    repo = 'ryanoasis/vim-devicons'

    [[plugins]]
    repo = 'w0rp/ale'
    hook_add = '''
        let g:ale_sign_column_always = 1
        let g:ale_sign_error = '✗'
        let g:ale_sign_warning = ''

        let g:ale_virtualtext_cursor = 'disabled'
        
        " let g:ale_python_flake8_options = '--max-line-length=120 --ignore=F403'
        
        if &diff
            let g:ale_enabled = 0
        else
            let g:ale_enabled = 1
        endif

        let g:ale_linters = {
            \ 'python': ['flake8'],
            \ 'go': ['staticcheck', 'govet', 'gofmt', 'goimports', 'trim_whitespace', 'remove_trailing_lines']
            \ }

        let g:ale_fixers = {
            \ 'python': ['isort', 'black'],
            \ }

        let g:ale_fix_on_save = 1

        nnoremap <silent> <C-S-j> :<C-u>ALENext<CR>
        nnoremap <silent> <C-S-k> :<C-u>ALEPrevious<CR>
    '''

    [[plugins]]
    repo = 'djoshea/vim-autoread'

    [[plugins]]
    repo = 'kshenoy/vim-signature'

    [[plugins]]
    repo = 'sheerun/vim-polyglot'
# }}}
# Dependancies {{{
    [[plugins]]
    repo = 'kana/vim-operator-user'
    lazy = 1

    [[plugins]]
    repo = 'kana/vim-textobj-user'
    lazy = 1

    [[plugins]]
    repo = 'xolox/vim-misc'
    lazy = 1

    # TODO: See which plugins require these two
    [[plugins]]
    repo = 'MarcWeber/vim-addon-mw-utils'
    lazy = 1

    [[plugins]]
    repo = 'tomtom/tlib_vim'
    lazy = 1

    # A dependancy for telescope
    [[plugins]]
    repo = 'nvim-lua/plenary.nvim'
    lazy = 1

    [[plugins]]
    repo = 'nvim-tree/nvim-web-devicons'
# }}}
# Lazy-loaded {{{
    [[plugins]]
    repo = 'scrooloose/nerdtree'
    on_cmd = [
        'NERDTree',
        'NERDTreeClose',
        'NERDTreeFocus',
        'NERDTreeMirror',
        'NERDTreeCWD',
        'NERDTreeFind',
        'NERDTreeFromBookmark',
        'NERDTreeToggle'
    ]
    hook_add = '''
        noremap <F2> :NERDTreeToggle<CR>
    '''
    hook_source = '''
        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeMapOpenSplit='s'
        let g:NERDTreeMapOpenVSplit='v'
        let g:NERDTreeRespectWildIgnore=1
    '''

    [[plugins]]
    repo = 'haya14busa/vim-operator-flashy'
    depends = 'vim-operator-user'
    on_map = [['nx', '<Plug>']]
    hook_add = '''
        map y <Plug>(operator-flashy)
        nmap Y ^<Plug>(operator-flashy)g_
    '''

    [[plugins]]
    repo = 'beloglazov/vim-textobj-quotes'
    depends = 'vim-textobj-user'
    on_map = [['ox', '<Plug>']]

    [[plugins]]
    repo = 'Julian/vim-textobj-brace'
    depends = 'vim-textobj-user'
    on_map = [['ox', '<Plug>']]

    [[plugins]]
    repo = 'guns/xterm-color-table.vim'
    on_cmd = 'XtermColorTable'

    [[plugins]]
    repo = 'tomtom/tcomment_vim'
    on_cmd = "TComment"
    hook_add = '''
        " Ctrl-/ for comment/uncomment
        nnoremap <C-_> :TComment<CR>
        vnoremap <C-_> :TComment<CR>
        inoremap <C-_> <Esc>:TComment<CR>i

        nnoremap <C-/> :TComment<CR>
        vnoremap <C-/> :TComment<CR>
        inoremap <C-/> <Esc>:TComment<CR>i
    '''
    hook_source = '''
        let g:tcomment_maps=0
        let g:tcomment#options = {}
        let g:tcomment#options.mixedindent = 1
    '''

    [[plugins]]
    repo = 'SirVer/ultisnips'
    on_event = 'InsertEnter'
    on_cmd = ['UltiSnipsEdit', 'UltiSnipsAddFiletypes']
    hook_add = '''
        let g:UltiSnipsUsePythonVersion = 3 
        let g:UltiSnipsEditSplit = "context"
        let g:UltiSnipsExpandTrigger = "<C-j>"
        let g:UltiSnipsJumpForwardTrigger = "<C-j>"
        let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
    '''

    [[plugins]]
    repo = 'rhysd/git-messenger.vim'
    on_cmd = [
        'GitMessenger'
    ]
    on_map = [['ox', '<Plug>']]
    hook_add = '''
        nmap <Leader>gm <Plug>(git-messenger)
    '''
# }}}
# Filetype-specific {{{
    # Python {{{
        [[plugins]]
        repo = 'vim-python/python-syntax'
        on_ft = 'python'
        hook_source = '''
            let g:python_highlight_all = 1
        '''

        [[plugins]]
        repo = 'davidhalter/jedi-vim'
        on_ft = 'python'
        hook_source = '''
            let g:jedi#use_tabs_not_buffers = 1
            let g:jedi#show_call_signatures = "0"  " 1 -> Popup; 2 -> command line
            let g:jedi#completions_enabled = 0
            let g:jedi#goto_command = "gd"
            let g:jedi#documentation_command = "<C-d>"

            " Don't fucking insert 'import' to disrupt my flow!
            let g:jedi#smart_auto_mappings = 0
        '''

        [[plugins]]
        repo = 'zchee/deoplete-jedi'
        depends = 'deoplete.nvim'
        on_ft = 'python'
        on_event = 'InsertEnter'

        [[plugins]]
        repo = 'plytophogy/vim-virtualenv'
        on_ft = 'python'
    # }}}
    # Go {{{
        [[plugins]]
        repo = 'fatih/vim-go'
        on_ft = 'go'
        make = ':GoUpdateBinaries'
        hook_add = '''
            " Disable default mapping for showing documentation
            let g:go_doc_keywordprg_enabled = 0

            " Disable default mapping for go to definition
            let g:go_def_mapping_enabled = 0

            " Disable the quickfix error for linting
            let g:go_fmt_fail_silently = 1

            " Keep folds as they are on write (after go_fmt does its job)
            " ref: https://github.com/fatih/vim-go/issues/502
            let g:go_fmt_experimental = 1
        '''
        hook_source = '''
            augroup go_mappings
                autocmd!
                autocmd FileType go nnoremap <buffer> <C-d> :GoDoc<CR>
                autocmd FileType go nnoremap <buffer> <C-S-d> :GoDocBrowser<CR>
                autocmd FileType go nmap <buffer> gd <Plug>(go-def-tab)
            augroup END
        '''

        [[plugins]]
        repo = 'deoplete-plugins/deoplete-go'
        depends = 'deoplete.nvim'
        build = 'make'
        on_ft = 'go'
        on_event = 'InsertEnter'
    # }}}
    # Lua {{{
        [[plugins]]
        repo = 'xolox/vim-lua-ftplugin'
        depends = 'vim-misc'
        on_ft = 'lua'
    # }}}
    # SQL {{{
        [[plugins]]
        repo = 'exu/pgsql.vim'
        on_ft = ['sql', 'pgsql']
        hook_source = '''
            let g:sql_type_default = 'pgsql'
        '''

        [[plugins]]
        repo = 'alcesleo/vim-uppercase-sql'
        on_ft = ['sql', 'pgsql']
    # }}}
    # Markdown {{{
        [[plugins]]
        repo = 'plasticboy/vim-markdown'
        on_ft = 'markdown'
        hook_add = '''
            " The folding works just fine, however it's triggered on save and that's annoying
            " Ideally (TODO) I should keep it but fix this behaviour
            let g:vim_markdown_folding_disabled = 1
        '''
    # }}}
    # TOML {{{
        [[plugins]]
        repo = 'cespare/vim-toml'
        on_ft = 'toml'
    # }}}
    # vim {{{
        [[plugins]]
        repo = 'Shougo/neco-vim'
        on_ft = 'vim'
    # }}}
    # tmux {{{
        [[plugins]]
        repo = 'keith/tmux.vim'
        on_ft = 'tmux'
    # }}}
    # git {{{
        [[plugins]]
        repo = 'tpope/vim-git'
        on_ft = ['git', 'gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail']
    # }}}
    # Logs {{{
        [[plugins]]
        repo = 'MTDL9/vim-log-highlighting'
        on_ft = 'log'
    # }}}
# }}}
# Shougo's glorious plugins {{{
    [[plugins]]
    repo = 'Shougo/dein.vim'

    [[plugins]]
    repo = 'Shougo/context_filetype.vim'

    [[plugins]]
    repo = 'Shougo/deoplete.nvim'
    depends = 'context_filetype.vim'
    on_event = 'InsertEnter'
    hook_add = '''
        let g:deoplete#enable_at_startup = 1
        let g:deoplete#max_menu_width = 80
    '''
    hook_source = '''
        " Auto select the first option
        set completeopt+=noinsert

        inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#mappings#manual_complete()

        function! s:check_back_space() abort "{{{
            let col = col('.') - 1
            return !col || getline('.')[col - 1]  =~ '\s'
        endfunction "}}}

        " Disable the "preview" (docstring) window after the completion is done
        set completeopt-=preview
    '''
# }}}
# Telescope {{{
    [[plugins]]
    repo = 'pschmitt/telescope-yadm.nvim'
    depends = ['telescope.nvim']
    on_cmd = ['Telescope']

    [[plugins]]
    repo = 'nvim-telescope/telescope.nvim'
    rev = '0.1.x'
    depends = ['plenary.nvim']
    on_cmd = ['Telescope']
    lua_source = '''
        local telescope = require("telescope")

        telescope.setup{
            defaults = {
                sorting_strategy = "ascending",
                layout_config = {
                    horizontal = {
                        width = 0.9,
                        prompt_position = "top"
                    }
                },
                mappings = {
                    i = {
                        ["<esc>"] = require('telescope.actions').close,
                    }
                }
            }
        }

        telescope.load_extension("yadm_files")
        telescope.load_extension("git_or_yadm_files")
    '''
    hook_add = '''
        nnoremap <silent> <C-p> <cmd>Telescope find_files<CR>
        nnoremap <silent> <C-h> <cmd>Telescope help_tags<CR>
        nnoremap <silent> <C-f> <cmd>Telescope live_grep<cr>
        nnoremap <silent> <leader>* <cmd>Telescope grep_string<cr>
        nnoremap <silent> <C-d> <cmd>Telescope yadm_files<CR>
    '''
# }}}
