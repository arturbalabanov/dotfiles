#!/bin/bash

set -eo pipefail

SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")"
source "$SCRIPTS_DIR/common.sh"

if [[ -z "${JIRA_API_TOKEN}" ]]; then
    export JIRA_API_TOKEN=$(cat ~/tokens/jira.txt)
fi

if [[ -z "${JIRA_API_TOKEN}" ]]; then
	error "No JIRA API Token provided"
fi

detail() {
    # TODO: If not set, default to issue from current branch name
    issue_key="$1"
    jira issue view --plain "$issue_key"
}

new() {
    echo "TODO: Implement"

    # TODO: Original estimate
    # TODO: Fix version
    # TODO: Summary
    # TODO: team
    # TODO: Parent with --parent MPT-xxxx or no parent somehow?
    # TODO: Move to sprint?

    # jira issue create \
    # 	--type Story \
    # 	--summary "Build a testing utility for SQL queries generated by SQLAlchemy" \
    # 	--component "Extension FinOps" \
    # 	--assignee $(jira me) \
    # 	--original-estimate "1d" \
    # 	--fix-version "v4"
}

list-mine() {
    jira sprint list \
        --current \
        --columns "type,key,priority,status,summary" \
        --assignee "$(jira me)" \
        --status "~Done" \
        --plain 
    
    # TODO: Add a preview to fzf with `jira issue view $issue_key`
}

start() {
    jira sprint list \
            --current \
            --columns "type,key,priority,status,summary" \
            --status "New" \
            --order-by "Priority" \
            --jql '"Team[Team]" = REDACTED' \
            --plain \
        | sed '1d' \
        | fzf \
        | awk -F '\t{1,}' '{                                                                                                                           
            branch_type = "chore";
            if ($1 == "Story")
                branch_type = "feat";

            issue_key = $2;
            issue_summary = $5;

            normalized_summary = tolower(issue_summary);
            gsub(/[^[:alnum:]]/, " ", normalized_summary);
            gsub("^ +", "", normalized_summary);
            gsub(" +$", "", normalized_summary);
            gsub(" +", "-", normalized_summary);

            printf("%s/%s-%s", branch_type, issue_key, normalized_summary)
        }'
    
    # TODO: Add a preview to fzf with `jira issue view $issue_key`
    # TODO: Create a new branch from main (after pull)
}

review() {
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    jira_issue=$(echo -n "$branch_name" | sed -E -n 's|^.*/(([A-Z]{2,}\-[0-9]+)\-)?.*$|\2|p')

    if [[ -z "$jira_issue" ]]; then
        echo "error: no JIRA issue found in branch name" >&2
        exit 1
    fi

    git push --set-upstream origin "$branch_name"
    gh pr create
    jira issue move "$jira_issue" "Code Review"
}

complete() {
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    jira_issue=$(echo -n "$branch_name" | sed -E -n 's|^.*/(([A-Z]{2,}\-[0-9]+)\-)?.*$|\2|p')
    
    gh pr merge --squash
    
    jira issue move "$jira_issue" "Resolve"
    jira issue move "$jira_issue" "Verify"
    echo "Update time tracking for $jira_issue"
    jira issue view "$jira_issue"
    # TODO: automate time tracking
}

if [ "$1" = "new" ]; then
    shift
    new "$@"
elif [ "$1" = "list-mine" ]; then
    shift
    list-mine "$@"
elif [ "$1" = "start" ]; then
    shift
    start "$@"
elif [ "$1" = "review" ]; then
    shift
    review "$@"
elif [ "$1" = "complete" ]; then
    shift
    complete "$@"
elif [ "$1" = "detail" ]; then
    shift
    detail "$@"
fi
