#!/bin/bash

function _gl_http {
    request=$1
    relative_url=$2
    jq_filter=$3

    url=$GITLAB_API_BASE_URL/$relative_url

    curl --request $request --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" $url 2>/dev/null \
        | ( [[ -n $jq_filter ]] && jq -r "$jq_filter" || : )
}

function _dependancy {
    command_name=$1

    if ! command -v "$command_name" >/dev/null 2>&1; then
        echo "'$command_name' required but not found"
        exit 1
    fi
} 

_dependancy "jq"
_dependancy "pass"

origin_url=$(git remote get-url origin)
GITLAB_API_BASE_URL=$(echo $origin_url | sed -r 's_^\s*(https?://)(\w+@)?(git|gitlab)\.([a-zA-Z0-9\.]+)/.*$_\1\3.\4/api/v4_')

if [[ $origin_url == $GITLAB_API_BASE_URL ]]; then
	# Unrecognised URL format, probably not a GitLab repo
	exit 0
fi

GITLAB_PRIVATE_TOKEN=$(pass show gitlab-private-token)

branch_name=$(git symbolic-ref --short -q HEAD)
repo_name=$(basename $(git rev-parse --show-toplevel))

gitlab_repo_id=$(_gl_http "GET" \
    "projects?search=$repo_name" \
    ".[] | select(.name == \"$repo_name\") | .id" \
)

pipelines_to_cancel=$(_gl_http "GET" \
    "projects/$gitlab_repo_id/pipelines?ref=$branch_name" \
    ".[] | select(.status == \"running\" or .status == \"pending\") | .id" \
)

for pipeline_id in $pipelines_to_cancel; do
    echo "Cancelling Pipeline $pipeline_id"

    _gl_http "POST" "projects/$gitlab_repo_id/pipelines/$pipeline_id/cancel"
done
